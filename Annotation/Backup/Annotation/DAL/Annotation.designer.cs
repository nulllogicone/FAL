#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FAL.Annotation.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BestChance")]
	public partial class AnnotationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnnotation(Annotation instance);
    partial void UpdateAnnotation(Annotation instance);
    partial void DeleteAnnotation(Annotation instance);
    #endregion
		
		public AnnotationDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BestChanceConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Annotation> Annotation
		{
			get
			{
				return this.GetTable<Annotation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Annotation")]
	public partial class Annotation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AnnotationGuid;
		
		private System.DateTime _Datum;
		
		private System.Guid _AutorGuid;
		
		private string _ReverseUrl;
		
		private string _DbEntity;
		
		private System.Nullable<System.Guid> _DbGuid;
		
		private string _RelationUrl;
		
		private string _Titel;
		
		private string _Text;
		
		private string _IconUrl;
		
		private string _Type;
		
		private string _Status;
		
		private int _Priority;
		
		private bool _IsPublic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnnotationGuidChanging(System.Guid value);
    partial void OnAnnotationGuidChanged();
    partial void OnDatumChanging(System.DateTime value);
    partial void OnDatumChanged();
    partial void OnAutorGuidChanging(System.Guid value);
    partial void OnAutorGuidChanged();
    partial void OnReverseUrlChanging(string value);
    partial void OnReverseUrlChanged();
    partial void OnDbEntityChanging(string value);
    partial void OnDbEntityChanged();
    partial void OnDbGuidChanging(System.Nullable<System.Guid> value);
    partial void OnDbGuidChanged();
    partial void OnRelationUrlChanging(string value);
    partial void OnRelationUrlChanged();
    partial void OnTitelChanging(string value);
    partial void OnTitelChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnIconUrlChanging(string value);
    partial void OnIconUrlChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    #endregion
		
		public Annotation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnotationGuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AnnotationGuid
		{
			get
			{
				return this._AnnotationGuid;
			}
			set
			{
				if ((this._AnnotationGuid != value))
				{
					this.OnAnnotationGuidChanging(value);
					this.SendPropertyChanging();
					this._AnnotationGuid = value;
					this.SendPropertyChanged("AnnotationGuid");
					this.OnAnnotationGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datum", DbType="DateTime NOT NULL")]
		public System.DateTime Datum
		{
			get
			{
				return this._Datum;
			}
			set
			{
				if ((this._Datum != value))
				{
					this.OnDatumChanging(value);
					this.SendPropertyChanging();
					this._Datum = value;
					this.SendPropertyChanged("Datum");
					this.OnDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutorGuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AutorGuid
		{
			get
			{
				return this._AutorGuid;
			}
			set
			{
				if ((this._AutorGuid != value))
				{
					this.OnAutorGuidChanging(value);
					this.SendPropertyChanging();
					this._AutorGuid = value;
					this.SendPropertyChanged("AutorGuid");
					this.OnAutorGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReverseUrl", DbType="NVarChar(255)")]
		public string ReverseUrl
		{
			get
			{
				return this._ReverseUrl;
			}
			set
			{
				if ((this._ReverseUrl != value))
				{
					this.OnReverseUrlChanging(value);
					this.SendPropertyChanging();
					this._ReverseUrl = value;
					this.SendPropertyChanged("ReverseUrl");
					this.OnReverseUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DbEntity", DbType="VarChar(50)")]
		public string DbEntity
		{
			get
			{
				return this._DbEntity;
			}
			set
			{
				if ((this._DbEntity != value))
				{
					this.OnDbEntityChanging(value);
					this.SendPropertyChanging();
					this._DbEntity = value;
					this.SendPropertyChanged("DbEntity");
					this.OnDbEntityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DbGuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DbGuid
		{
			get
			{
				return this._DbGuid;
			}
			set
			{
				if ((this._DbGuid != value))
				{
					this.OnDbGuidChanging(value);
					this.SendPropertyChanging();
					this._DbGuid = value;
					this.SendPropertyChanged("DbGuid");
					this.OnDbGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationUrl", DbType="NVarChar(255)")]
		public string RelationUrl
		{
			get
			{
				return this._RelationUrl;
			}
			set
			{
				if ((this._RelationUrl != value))
				{
					this.OnRelationUrlChanging(value);
					this.SendPropertyChanging();
					this._RelationUrl = value;
					this.SendPropertyChanged("RelationUrl");
					this.OnRelationUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Titel
		{
			get
			{
				return this._Titel;
			}
			set
			{
				if ((this._Titel != value))
				{
					this.OnTitelChanging(value);
					this.SendPropertyChanging();
					this._Titel = value;
					this.SendPropertyChanged("Titel");
					this.OnTitelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconUrl", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string IconUrl
		{
			get
			{
				return this._IconUrl;
			}
			set
			{
				if ((this._IconUrl != value))
				{
					this.OnIconUrlChanging(value);
					this.SendPropertyChanging();
					this._IconUrl = value;
					this.SendPropertyChanged("IconUrl");
					this.OnIconUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
